#!/bin/sh
function gl () {
    now_pwd=`pwd`
    while [[ ! -d ".git" ]]
    do
        cd ..
        if [[ `pwd` = '/' ]]
        then
            echo 'Here is Root, Damn! Let us go back, biu~~'
            cd ${now_pwd}
            return
        fi
    done
    head=`cat .git/HEAD`
    current_head=`echo $head | cut -b 17-`
    user=${current_head%%_*}
    if [[ $current_head = *_* ]]
    then
        branch=${current_head%%+*}
        branch=${branch##*_}
        user_branch="${user}_${branch}"
        git fetch origin
        git merge $user_branch origin/$user_branch
        git merge $user_branch origin/$branch
        if [[ $current_head = *+* ]]
        then
            git merge $current_head origin/${user_branch}
            git merge $current_head origin/$current_head
            git merge $current_head $user_branch
        fi
    else
        echo "you are not in your own branch"
    fi
}

function gh () {
    now_pwd=`pwd`
    while [[ ! -d ".git" ]]
    do
        cd ..
        if [[ `pwd` = '/' ]]
        then
            echo 'Here is Root, Damn! Let us go back, biu~~'
            cd ${now_pwd}
            return
        fi
    done
    head=`cat .git/HEAD`
    current_head=`echo $head | cut -b 17-`
    user=${current_head%%_*}
    if [[ $current_head = *_* ]]
    then
        branch=${current_head%%+*}
        branch=${branch##*_}
        user_branch="${user}_${branch}"
        git fetch origin
        git merge $user_branch origin/$user_branch
        git merge $user_branch origin/$branch
        if [[ $current_head = *+* ]]
        then
            git push origin $user_branch
            git fetch origin
            git checkout $current_head
            git merge origin/${user_branch}
            git merge $current_head origin/$current_head
            git push origin $current_head
        else
            git push origin $user_branch
        fi
    else
        echo "you are not in your own branch"
    fi
}

function gr () {
    now_pwd=`pwd`
    while [[ ! -d ".git" ]]
    do
        cd ..
        if [[ `pwd` = '/' ]]
        then
            echo 'Here is Root, Damn! Let us go back, biu~~'
            cd ${now_pwd}
            return
        fi
    done
    head=`cat .git/HEAD`
    current_head=`echo $head | cut -b 17-`
    origin=`git ls-remote --get-url origin`
    user=${current_head%%_*}
    if [[ $current_head = *_* ]]
    then
        branch=${current_head%%+*}
        branch=${branch##*_}
        if [[ $current_head = *+* ]]
        then
            user_branch="$current_head"
        else
            user_branch="${user}_${branch}"
        fi
        msg="${user_branch}_pull-request"
        desc=`git log origin/$branch..$user_branch --pretty=oneline --abbrev-commit --no-merges`
        result=$(echo $origin | grep "github.com")
        if [[ "$result" != "" ]]
        then
            hub pull-request -o -m msg -b $branch -h $user_branch
        else
            projectId=`git config --get gitlab.projectId`
            assignee=`git config --get gitlab.assignee`
            url=`git config --get gitlab.url`
            token=`git config --get gitlab.token`

            if [[ $url != `gitlab url` ]]
            then
                echo 'Setup gitlab url $url'
                gitlab url $url
            fi

            if [[ $token != `gitlab token` ]]
            then
                echo 'Setup gitlab token $token'
                gitlab token $token
            fi


            if [[ `git diff $user_branch  origin/$branch | grep diff`  != "" ]]; then
                gitlab addMergeRequest $projectId $user_branch $branch $assignee $msg | grep -p "http.*/merge_requests/\d\+" -o | xargs -I {} open {}
            else
                echo "Your branch $user_branch is sync with $branch"
            fi

        fi
    else
        echo "you are not in your own branch"
    fi
}

function gnb () {
    pkill Xcode
    default_branch=''
    if [ -z "$1" ]; then
        echo "Usage: gnb branchName"
        return
    else
        echo
    if [[ $1 == *_* ]]; then
        echo "Usage: defaultBranch name should not include _"
        return
      else
        default_branch=$1
      fi
    fi

   now_pwd=`pwd`
   while [[ ! -d ".git" ]]; do
    cd ..
    if [[ `pwd` = '/' ]]; then
        echo 'Here is Root, Damn! Let us go back, biu~~'
        cd ${now_pwd}
        return
    fi
    done


    user=`git config --get user.name`
    user_branch="${user}_$default_branch"

    git fetch origin
    git fetch --tags

    if [ -f ".git/refs/remotes/origin/$default_branch" ]; then
        echo "Remote has ${default_branch}"
        # 远程有服务器分支
        git checkout $default_branch
        git branch --set-upstream-to=origin/$default_branch
        git merge origin/${default_branch}
        git push origin ${default_branch}
    else
        echo "Remote don't have ${default_branch}"
        # 服务器没有这个分支
        git checkout -b $default_branch
        git push origin ${default_branch}
        git branch --set-upstream-to=origin/$default_branch
    fi


    if [ -f ".git/refs/remotes/origin/$user_branch" ]; then
        echo "Remote has ${user_branch}"
        # 远程有服务器分支
        git checkout $user_branch
        git branch --set-upstream-to=origin/$user_branch
        git merge origin/${user_branch}
        git push origin ${user_branch}
    else
        echo "Remote don't have ${user_branch}"
        # 服务器没有这个分支
        git checkout -b $user_branch
        git push origin ${user_branch}
        git branch --set-upstream-to=origin/$user_branch
    fi
    gl
}

function gcd () {
    now_pwd=`pwd`
    while [[ ! -d ".git" ]]
    do
        cd ..
        if [[ `pwd` = '/' ]]
        then
            echo 'Here is Root, Damn! Let us go back, biu~~'
            cd ${now_pwd}
            return
        fi
    done
    head=`cat .git/HEAD`
    user=`git config --get user.name`
    if [[ $head = *_* ]]
    then
        echo "you have already switched to your own branch"
    else
        branch=`echo $head | cut -b 17-`

        if [[ -z "$1" ]]
        then
            user_branch="${user}_${branch}"
        else
            user_branch="${user}_${branch}+$1"
        fi
        git checkout $user_branch
    fi
}

function gdc() {
    now_pwd=`pwd`
    while [[ ! -d ".git" ]];do
        cd ..
        if [[ `pwd` == '/' ]]; then
            echo 'Here is Root, Damn! Let us go back, biu~~'
            cd ${now_pwd}
            return
        fi
    done;
    head=`cat .git/HEAD`

    current_head=`echo $head | cut -b 17-`


    user=${current_head%%_*}

    if [[ $current_head == *_* ]]; then
        if [[ $current_head == *+* ]]; then
            branch=${current_head%%+*}
        elif [[ $current_head == *-* ]]; then
            branch=${current_head##*_}
        else
            branch=${current_head##*_}
        fi
        git checkout $branch
    else
        default_branch=''
        if [ -z "$1" ]; then
          default_branch=`git remote show origin | grep "HEAD branch" | cut -d : -f2 | cut -c 2-`
        else
          default_branch=$1
        fi
        git checkout $default_branch
    fi
}


function gbeginpr() {
    now_pwd=`pwd`
    while [[ ! -d ".git" ]];do
        cd ..
        if [[ `pwd` == '/' ]]; then
            echo 'Here is Root, Damn! Let us go back, biu~~'
            cd ${now_pwd}
            return
        fi
    done;
    if [[ ! -z $(git status -uno --porcelain) ]];then
        echo "Please clean up your git status"
        return
    fi
    if [ -z "$1" ]; then
        echo "Usage: gbeginpr user_branch"
        return
    else
        git checkout $1
        gl
        git push origin $1
        if [[ ! -z $(git status -uno --porcelain) ]];then
            echo "the $1 has merge conflict, please fix it."
        return
    fi
    fi
}


function gmergepr() {
    pkill Xcode
    now_pwd=`pwd`
    while [[ ! -d ".git" ]];do
        cd ..
        if [[ `pwd` == '/' ]]; then
            echo 'Here is Root, Damn! Let us go back, biu~~'
            cd ${now_pwd}
            return
        fi
    done;


    if [ -z "$1" ]; then
        echo "Usage: gmergepr user_branch"
        return
    else
        if [[ ! -z $(git status -uno --porcelain) ]];then
            git add -u .
            git stash
            current_head=`git branch | grep -e "^*" | cut -d' ' -f 2`
            current_head2="${current_head}"
            git checkout $1 && gl && gdc && git merge - && git push && git checkout - && git push && git checkout $current_head2
            git stash apply
            return
        else
            current_head=`git branch | grep -e "^*" | cut -d' ' -f 2`
            current_head2="${current_head}"
            git checkout $1 && gl && gdc && git merge - && git push && git checkout - && git push && git checkout $current_head2
        fi
    fi
}

function gci() {
    git add .
    git add -u
    git commit -m "$*"
}

function gvpn() {
    git_path=`git config remote.origin.url | cut -d ':' -f 2`
    git remote set-url origin 'git@10.148.68.13:'$git_path
}

function glocal() {
    git_path=`git config remote.origin.url | cut -d ':' -f 2`
    git remote set-url origin 'git@172.20.92.28:'$git_path
}

alias grst='git reset . && git checkout . && git clean -df .'
alias gf='git diff'
alias gg='git log | less'
alias ga='git add . && git add -u'
alias gtci='git add . && git commit -m "Minor fixes"'
alias gs='git status'
alias sg='git status'
alias gp='git pull'
alias gu='git push'
alias gpu='git pull && git push'
alias ghr='gh && gr'

